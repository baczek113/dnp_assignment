@page "/posts"
@page "/posts/{postId:int}"
@using System.Net
@using System.Text
@using System.Text.Json
@using ApiContracts
@using ApiContracts.Comment
@using ApiContracts.Post
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Mvc.Diagnostics
@inject HttpPostService HttpPostService
@inject HttpUserService HttpUserService
@inject HttpCommentService HttpCommentService
@rendermode InteractiveServer

<PageTitle>@((thePost!=null) ? thePost.Title : "Posts")</PageTitle>

<h1>@((thePost!=null) ? thePost.Title : "Posts")</h1>

<div style="display: flex; flex-direction: column; width: 100%; row-gap: 20px; align-items: flex-start">
    @if (postList != null && postId == 0)
    {
        @foreach (var post in postList)
        {
            <a href="/posts/@post.Id"><div>@post.Title</div></a>
        }
    }
    else
    {
        if (thePost != null && postAuthor != null && comments != null)
        {
            <div
                style="display: flex; flex-direction: column; width: 400px; padding: 20px; justify-content: space-between; align-items: flex-start;">
                <div>By <b>@postAuthor.Username</b></div>
                <div>Content: <br/>@thePost.Body</div>
                <div>
                    <h3>Comments:</h3>
                    @foreach (var comment in comments)
                    {
                        <h5>@commentAuthorNames[comment.AuthorId] said:</h5>
                        <div>@comment.Body</div>
                    }
                </div>
            </div>
            <a style="padding: 15px; text-decoration: none; color: white; background-color: lightslategray" href="/add-comment/@thePost.Id">Add a comment</a>
        }
    }
</div>

@code {
    [Parameter] public int postId { get; set; }
    public GetPostsDto getPostsDto;
    public List<PostDto>? postList;
    public PostDto? thePost;
    public UserDto? postAuthor;
    public List<CommentDto>? comments;
    public Dictionary<int, string>? commentAuthorNames;

    private async Task LoadComponent()
    {
        try
        {
            if (postId == 0)
            {
                getPostsDto = await HttpPostService.GetPostsAsync();
                postList = getPostsDto.Posts;
            }
            else
            {
                thePost = await HttpPostService.GetPostAsync(postId);
                postAuthor = await HttpUserService.GetUserAsync(thePost.AuthorId);
                GetCommentsDto commentsDto = await HttpCommentService.GetCommentsAsync(thePost.Id);
                comments = commentsDto.Comments;
                commentAuthorNames = new Dictionary<int, string>();
                foreach (var commentDto in comments)
                {
                    if (!commentAuthorNames.ContainsKey(commentDto.AuthorId))
                    {
                        UserDto userDto = await HttpUserService.GetUserAsync(commentDto.AuthorId);
                        commentAuthorNames[userDto.Id] = userDto.Username;
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception response)
        {
            Console.WriteLine(response.Message);
            //Do something in the future maybe
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadComponent();
    }

    protected override void OnParametersSet()
    {
        LoadComponent();
    }
}