@page "/posts"
@page "/posts/{postId:int}"
@using System.Net
@using System.Text
@using System.Text.Json
@using ApiContracts
@using ApiContracts.Comment
@using ApiContracts.Post
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Mvc.Diagnostics
@inject HttpPostService HttpPostService
@inject HttpUserService HttpUserService
@inject HttpCommentService HttpCommentService
@rendermode InteractiveServer

<PageTitle>@((thePost != null) ? thePost.Title : "Posts")</PageTitle>

<div class="posts-container">
    <h1 class="page-title">@((thePost != null) ? thePost.Title : "Posts")</h1>

    <div class="posts-content">
        @if (postList != null && postId == 0)
        {
            <div class="post-list-container">
                @foreach (var post in postList)
                {
                    <a class="post-list-item" href="/posts/@post.Id">
                        <div>@post.Title</div>
                    </a>
                }
            </div>
        }
        else
        {
            if (thePost != null && postAuthor != null && comments != null)
            {
                <div class="single-post">
                    <div class="post-meta">By <b>@postAuthor.Username</b></div>
                    <div class="post-body">@thePost.Body</div>

                    <div class="comments-section">
                        <h3>Comments</h3>
                        @foreach (var comment in comments)
                        {
                            <div class="comment">
                                <h5 class="comment-author">@commentAuthorNames[comment.AuthorId] said:</h5>
                                <div class="comment-body">@comment.Body</div>
                            </div>
                        }
                    </div>
                </div>

                <a class="add-comment-button" href="/add-comment/@thePost.Id">Add a comment</a>
            }
        }
    </div>
</div>

@code {
    [Parameter] public int postId { get; set; }
    public GetPostsDto getPostsDto;
    public List<PostDto>? postList;
    public PostDto? thePost;
    public UserDto? postAuthor;
    public List<CommentDto>? comments;
    public Dictionary<int, string>? commentAuthorNames;

    private async Task LoadComponent()
    {
        try
        {
            if (postId == 0)
            {
                getPostsDto = await HttpPostService.GetPostsAsync();
                postList = getPostsDto.Posts;
            }
            else
            {
                thePost = await HttpPostService.GetPostAsync(postId);
                postAuthor = await HttpUserService.GetUserAsync(thePost.AuthorId);
                GetCommentsDto commentsDto = await HttpCommentService.GetCommentsAsync(thePost.Id);
                comments = commentsDto.Comments;
                commentAuthorNames = new Dictionary<int, string>();
                foreach (var commentDto in comments)
                {
                    if (!commentAuthorNames.ContainsKey(commentDto.AuthorId))
                    {
                        UserDto userDto = await HttpUserService.GetUserAsync(commentDto.AuthorId);
                        commentAuthorNames[userDto.Id] = userDto.Username;
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception response)
        {
            Console.WriteLine(response.Message);
            //Do something in the future maybe
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadComponent();
    }

    protected override async void OnParametersSet()
    {
        await LoadComponent();
    }

}